BASIC STRUCTURE
- Prompt waiting (loop readline) ok
- addhistory function ok
- EOF and exit command ok

LEXING
- split input into tokens (spaces, tabs) ok
- special characters (| > >> < <<) ok
- handle quotes ' '' ok
- environment variables $VAR or $?* later

PARSING
- validate syntax (things that can go wrong)
- group tokes into commands etc
- heredoc <<

EXECUTION COMMANDS
- ls, pwd, echo, cd , export, unset, env, exit
- search and execute binaries using PATH
- file redirections (> >> <)

EXECUTION PIPES AND MULTIPLE COMMANDS
- set up pipes cmd1 | cmd2
- manage multiple child processes
- wait for all processes to finish
- handle exit codes

SIGNALS
- ctrl+c ctrl+d ctrl+...
- heredoc with signals (ctrl+c inside heredoc)
- update exit status $?
- signal handling during child execution

ERROR HANDLING & MEMORY MANAGEMENT
- consistent error messages (like bash)
- no leaks
- syscall failures (fork, pipe open etc)
- parsing errors

TESTING & DEBUGGING
- valgrind, edge cases, different shells, signals

FINAL CHECKS
- norm, headers, etc